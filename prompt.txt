You are working with two RL agents on a game grid: a patron and an altruist. Your task is to generate an optimal path for the altruist that helps the patron reach the apple on the grid.

Task parameters:

The game grid is represented as a matrix containing empty cells, walls, doors, buttons, and an apple.
The patron is an RL agent trained using a Q-table. Its goal is to reach the apple. Doors are initially closed, but the patron can go through a door if it is opened by stepping on the corresponding button.
The altruist is also an RL agent. Its task is to enable a clear path for the patron by pressing buttons if necessary. The altruist must avoid occupying any cells that the patron needs to pass through.
Each agent can move one cell per turn, only in four directions: up, down, left, or right (or could stay) — diagonal movement is not allowed.
Inputs:

The game grid as a matrix.
Starting coordinates for both the patron and the altruist.
The Q-table for the patron used to reach the apple.
Your task is to generate a list of cells as a Python list, describing the sequence of moves the altruist should make to fulfill its role and help the patron reach the apple.

Example input:

field = [
    ['', 'W', '', '', 'A'],
    ['', 'W', '', 'B1', 'W'],
    ['', 'D1', '', '', ''],
]
Where:

'' — empty cell
'W' — wall, no agent can step here: WALLS
'D1' — door 1, initially closed. No agent can step here unless opened: [(2, 1)]
'B1' — button for door 1; door opens if the altruist stands here: [(1, 3)]
'A' — apple (goal): [(0, 4)]
Also provided:

start_patron = PATRON_START  
start_altruist = ALTRUIST_START  
q_table_patron = PATRON_Q_TABLE
You must output the altruist's movement path in the format:

["(x0, y0) -> (x1, y1)", "(x1, y1) -> (x2, y2)", ..., "(xn-1, yn-1) -> (xn, yn)"]
This list should represent the optimal path for the altruist that ensures the patron can reach the apple, including activation of any necessary buttons.

Important constraints:

Agents cannot occupy the same cell at the same time.
Agents cannot move to the same cell in the same turn.
Agents make movement decisions simultaneously, based on the other agent’s current state. On each step, the patron moves first, followed by the altruist. Then a new step begins.
The patron can only step on a door if the altruist is already on the button.
Agents cannot move diagonally. Check that all your moves comply with this and all other rules!
Check explicitly that the altruist does not block the patron — for example, by standing on a button if that prevents the patron from proceeding!
Verify that the patron's path is correctly followed based on their Q-table.
Write a full list of altruist steps.
Perform a verification: simulate the agents’ moves turn-by-turn, showing each movement (state → state), ensuring that only one move is made per step (no diagonal), and explicitly check that the altruist doesn’t block the patron. Describe each move as: stay, move up, move down, move left, or move right.

At the end, present the final list of steps in this format:

```list_of_steps = []```
